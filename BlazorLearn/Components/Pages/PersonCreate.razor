@page "/person/new"
@rendermode InteractiveServer
@using BlazorLearn.Components.Account
@using BlazorLearn.Data.DTOs
@using BlazorLearn.Services.Implementations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@inject ProvinceService ProvinceService
@inject CityService CityService
@inject PersonService PersonService
@inject FileStorageService FileStorage
@attribute [Layout(typeof(BlazorLearn.Components.Layout.AdminLayout))]




<div class="vstack gap-3">

    <!-- کارت: فرم ثبت‌نام شخص -->
    <div class="card">
        <div class="card-header fw-semibold">
            ثبت‌نام شخص
        </div>

        <div class="card-body">
            @if (isLoading)
            {
                <div class="alert alert-info mb-3">در حال بارگذاری...</div>
            }
            else
            {
                @if (!string.IsNullOrEmpty(error))
                {
                    <div class="alert alert-danger mb-3">@error</div>
                }
                @if (!string.IsNullOrEmpty(success))
                {
                    <div class="alert alert-success mb-3">@success</div>
                }

                <EditForm Model="@model"
                          OnValidSubmit="@HandleSubmit"
                          FormName="person-create"
                          enctype="multipart/form-data"
                          class="needs-validation">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row g-3">
                        <!-- کد ملی -->
                        <div class="col-md-6">
                            <label class="form-label">کد ملی</label>
                            <InputText class="form-control" @bind-Value="model.NationalCode" />
                            <ValidationMessage For="@(() => model.NationalCode)" />
                        </div>

                        <!-- ایمیل -->
                        <div class="col-md-6">
                            <label class="form-label">ایمیل</label>
                            <InputText class="form-control ltr" @bind-Value="model.Email" />
                            <ValidationMessage For="@(() => model.Email)" />
                        </div>

                        <!-- نام -->
                        <div class="col-md-6">
                            <label class="form-label">نام</label>
                            <InputText class="form-control" @bind-Value="model.FirstName" />
                            <ValidationMessage For="@(() => model.FirstName)" />
                        </div>

                        <!-- نام خانوادگی -->
                        <div class="col-md-6">
                            <label class="form-label">نام خانوادگی</label>
                            <InputText class="form-control" @bind-Value="model.LastName" />
                            <ValidationMessage For="@(() => model.LastName)" />
                        </div>

                        <!-- شماره تماس -->
                        <div class="col-md-6">
                            <label class="form-label">شماره تماس</label>
                            <InputText class="form-control ltr" @bind-Value="model.PhoneNumber" />
                            <ValidationMessage For="@(() => model.PhoneNumber)" />
                        </div>

                        <!-- تاریخ تولد -->
                        <div class="col-md-6">
                            <label class="form-label">تاریخ تولد</label>
                            <InputDate class="form-control" @bind-Value="model.DateOfBirth" />
                            <ValidationMessage For="@(() => model.DateOfBirth)" />
                        </div>

                        <!-- جنسیت -->
                        <div class="col-md-6">
                            <label class="form-label">جنسیت</label>
                            <InputSelect class="form-select" @bind-Value="model.Gender">
                                <option value="">انتخاب کنید...</option>
                                @foreach (var g in genders)
                                {
                                    <option value="@g">@g</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => model.Gender)" />
                        </div>

                        <!-- استان -->
                        <div class="col-md-6">
                            <label class="form-label">استان</label>
                            <InputSelect class="form-select"
                                         TValue="int"
                                         Value="model.ProvinceId"
                                         ValueChanged="@(EventCallback.Factory.Create<int>(this, OnProvinceChanged))"
                                         ValueExpression="@(() => model.ProvinceId)">
                                <option value="0">انتخاب کنید...</option>
                                @foreach (var p in provinces)
                                {
                                    <option value="@p.Id">@p.Name</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => model.ProvinceId)" />
                        </div>

                        <!-- شهر -->
                        <div class="col-md-6">
                            <label class="form-label">شهر</label>
                            <InputSelect class="form-select"
                                         TValue="int"
                                         @bind-Value="model.CityId"
                                         disabled="@(!cities.Any())">
                                <option value="0">انتخاب کنید...</option>
                                @foreach (var c in cities)
                                {
                                    <option value="@c.Id">@c.Name</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => model.CityId)" />
                        </div>

                        <!-- آدرس -->
                        <div class="col-12">
                            <label class="form-label">آدرس</label>
                            <InputTextArea class="form-control" rows="3" @bind-Value="model.Address" />
                            <ValidationMessage For="@(() => model.Address)" />
                        </div>

                        <!-- تصویر پروفایل -->
                        <div class="col-md-6">
                            <label class="form-label">تصویر پروفایل (اختیاری)</label>
                            <InputFile OnChange="OnFileSelected" />
                            @if (!string.IsNullOrEmpty(previewFileName))
                            {
                                <div class="form-text">فایل انتخاب‌شده: @previewFileName</div>
                            }
                        </div>

                        <!-- دکمه‌ها -->
                        <div class="col-12 mt-2">
                            <button type="submit" class="btn btn-success" disabled="@isSaving">
                                @(isSaving ? "در حال ذخیره..." : "ذخیره")
                            </button>
                            <button type="button" class="btn btn-secondary ms-2" @onclick="ResetForm" disabled="@isSaving">
                                پاک‌سازی فرم
                            </button>
                        </div>
                    </div>
                </EditForm>
            }
        </div>
    </div>

</div>


@code {
    private PersonWriteDto model = new()
    {
        //مقدار دهی اولیه تاریخ
        DateOfBirth = DateTime.Today // یا یک تاریخ دلخواه
    };

    private List<ProvinceDto> provinces = new();
    private List<CityDto> cities = new();
    private readonly List<string> genders = new() { "Male", "Female", "Other" };

    private string? error;
    private string? success;
    private bool isLoading;
    private bool isSaving;
    private string? previewFileName;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            provinces = (await ProvinceService.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnProvinceChanged(int pid)
    {
        model.ProvinceId = pid;
        cities.Clear();
        model.CityId = 0;

        if (pid > 0)
            cities = (await CityService.GetByProvinceIdAsync(pid)).ToList();
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file is null) return;

            const long max = 2 * 1024 * 1024;
            using var ms = new MemoryStream();
            await file.OpenReadStream(max).CopyToAsync(ms);

            model.ProfileImageContent = ms.ToArray();
            model.ProfileImagePath = file.Name;
            model.ProfileImageContentType = file.ContentType;
            previewFileName = file.Name;
        }
        catch (Exception ex)
        {
            error = $"خطا در خواندن فایل: {ex.Message}";
        }
    }

    private async Task HandleSubmit(EditContext editContext)
    {
        error = success = null;

        if (model.ProvinceId <= 0) { error = "استان را انتخاب کنید."; return; }
        if (model.CityId <= 0) { error = "شهر را انتخاب کنید."; return; }

        isSaving = true;
        try
        {

            if (model.ProfileImageContent is { Length: > 0 })
            {
                var url = await FileStorage.SaveProfileAsync(model.ProfileImageContent,
                                                             model.ProfileImagePath ?? "profile.jpg");
                // اگر خواستی، این URL را به DTO بده و در PersonService ذخیره کن
                model.ProfileImagePath = url;  // در DTO/سرویس اضافه‌اش کن
            }

            await PersonService.CreateAsync(model);
            success = "ثبت با موفقیت انجام شد.";
            ResetForm();
        }
        catch (Exception ex)
        {
            error = $"خطا در ذخیره‌سازی: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }


    // نمونه سرویس/هندلر
    public async Task<Guid> RegisterUserAndPersonAsync(
        UserManager<IdentityUser<Guid>> userManager,
        PersonService personService,
        PersonWriteDto person,
        string password)
    {
        // 1) ایجاد کاربر Identity
        var user = new IdentityUser<Guid>
        {
            Id = Guid.NewGuid(),
            UserName = person.Email,
            Email = person.Email,
            EmailConfirmed = true
        };
        var result = await userManager.CreateAsync(user, password);
        if (!result.Succeeded)
            throw new Exception(string.Join(" | ", result.Errors.Select(e => e.Description)));

        // 2) اتصال به پروفایل
        person.UserId = user.Id;

        await personService.CreateAsync(person);
        return user.Id;
    }

    private void ResetForm()
    {
        model = new PersonWriteDto();
        cities.Clear();
        previewFileName = null;
        StateHasChanged();
    }
}
