@page "/persons"
@rendermode InteractiveServer

@using BlazorLearn.Data.DTOs
@using BlazorLearn.Services.Implementations
@inject PersonService PersonService
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthStateProvider
@attribute [Layout(typeof(BlazorLearn.Components.Layout.AdminLayout))]


<div class="vstack gap-3">

    <!-- کارت: لیست اشخاص -->
    <div class="card">
        <div class="card-header d-flex align-items-center gap-2">
            <div class="fw-semibold">لیست اشخاص</div>

            <div class="ms-auto d-flex align-items-center gap-2">
                <a class="btn btn-success btn-sm" href="/person/new">+ افزودن شخص</a>

                <label class="form-label m-0">تعداد در صفحه:</label>
                <select class="form-select form-select-sm" style="width: 90px"
                        @bind="pageSize"
                        @bind:event="onchange"
                        @bind:after="@(async () => await GoToPageAsync(1))">
                    <option value="5">5</option>
                    <option value="10">10</option>
                    <option value="20">20</option>
                </select>
            </div>
        </div>

        <div class="card-body">

            @if (!string.IsNullOrEmpty(error))
            {
                <div class="alert alert-danger mb-3">@error</div>
            }
            else if (isLoading)
            {
                <div class="alert alert-info mb-3">در حال بارگذاری...</div>
            }
            else if (items.Count == 0)
            {
                <div class="alert alert-warning mb-3">داده‌ای یافت نشد.</div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover align-middle">
                        <thead>
                            <tr>
                                <th style="width:56px">#</th>
                                <th>کد ملی</th>
                                <th>نام</th>
                                <th>نام خانوادگی</th>
                                <th>ایمیل</th>
                                <th>تلفن</th>
                                <th>استان/شهر</th>
                                <th>تاریخ تولد</th>
                                <th>تصویر</th>
                                <th style="width:220px">عملیات</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var row in items.Select((p, i) => new { p, i }))
                            {
                                var index = (currentPage - 1) * pageSize + row.i + 1;
                                <tr>
                                    <td>@index</td>
                                    <td>@row.p.NationalCode</td>
                                    <td>@row.p.FirstName</td>
                                    <td>@row.p.LastName</td>
                                    <td class="ltr">@row.p.Email</td>
                                    <td class="ltr">@row.p.PhoneNumber</td>
                                    <td>@row.p.ProvinceName / @row.p.CityName</td>
                                    <td>@row.p.DateOfBirth.ToString("yyyy-MM-dd")</td>
                                    <td>
                                        @if (!string.IsNullOrWhiteSpace(row.p.ProfileImagePath))
                                        {
                                            <img src="@row.p.ProfileImagePath"
                                                 class="rounded"
                                                 style="width:42px;height:42px;object-fit:cover;" />
                                        }
                                        else
                                        {
                                            <span class="text-muted">—</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-outline-primary"
                                                    @onclick="() => GoDetails(row.p.Id)">
                                                جزئیات
                                            </button>
                                            <button class="btn btn-sm btn-primary"
                                                    @onclick="() => GoEdit(row.p.Id)">
                                                ویرایش
                                            </button>
                                            <button class="btn btn-sm btn-danger"
                                                    @onclick="() => DeleteAsync(row.p.Id)">
                                                حذف
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- صفحه‌بندی -->
                <nav aria-label="pagination" class="mt-3">
                    <ul class="pagination">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="@(async () => await GoToPageAsync(1))">&laquo;</button>
                        </li>
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="@(async () => await GoToPageAsync(currentPage - 1))">قبلی</button>
                        </li>
                        <li class="page-item disabled">
                            <span class="page-link">
                                صفحه @currentPage از @totalPages
                                <span class="ms-2 text-muted">(کل: @totalCount)</span>
                            </span>
                        </li>
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="@(async () => await GoToPageAsync(currentPage + 1))">بعدی</button>
                        </li>
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="@(async () => await GoToPageAsync(totalPages))">&raquo;</button>
                        </li>
                    </ul>
                </nav>
            }
        </div>
    </div>

</div>


@code {
    private List<PersonListItemDto> items = new();
    private string? error;
    private bool isLoading;

    private int currentPage = 1;
    private int pageSize = 10;
    private int totalCount = 0;

    private bool isAdmin;

    //expression-bodied property
    //هر بار که totalPages در کدت فراخوانی شود، مقدارش دوباره محاسبه می‌شود.
    private int totalPages => Math.Max(1, (int)Math.Ceiling(totalCount / (double)pageSize));

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAdmin = user.IsInRole(Roles.Admin);

        await LoadPageAsync();
    }

    private async Task LoadPageAsync()
    {
        try
        {
            isLoading = true;
            error = null;

            //tuple deconstruction
            //خروجی دستور دو متغیر است
            var (rows, total) = await PersonService.GetPagedAsync(currentPage, pageSize);

            items = rows.ToList();
            totalCount = total;
        }
        catch (Exception ex)
        {
            error = ex.Message;
            items.Clear();
            totalCount = 0;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task GoToPageAsync(int page)
    {
        if (page < 1) page = 1;
        if (page > totalPages) page = totalPages;
        currentPage = page;
        await LoadPageAsync();
    }

    // ناوبری—بعداً صفحه‌های جزئیات/ویرایش را پیاده می‌کنیم
    private void GoDetails(Guid id) => Nav.NavigateTo($"/person/{id}");
    private void GoEdit(Guid id) => Nav.NavigateTo($"/person/edit/{id}");

    private async Task DeleteAsync(Guid id)
    {
        var ok = await JS.InvokeAsync<bool>("confirm", "آیا از حذف این رکورد مطمئن هستید؟");
        if (!ok) return;

        try
        {
            await PersonService.DeleteAsync(id);
            // اگر آخرین رکورد صفحه حذف شد و صفحه خالی ماند، یک صفحه برگرد
            if ((totalCount - 1) <= (currentPage - 1) * pageSize && currentPage > 1)
                currentPage--;

            await LoadPageAsync();
        }
        catch (Exception ex)
        {
            error = $"خطا در حذف: {ex.Message}";
        }
    }
}
