@page "/profile"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using BlazorLearn.Data.DTOs
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization

@inject UserManager<IdentityUser> UserManager
@inject NavigationManager Nav
@inject ProvinceService ProvinceService
@inject CityService CityService
@inject PersonService PersonService
@inject FileStorageService FileStorage
@inject IServiceScopeFactory ScopeFactory
@inject IJSRuntime JS

<div class="vstack gap-3">

    <div class="d-flex align-items-center justify-content-between">
        <h4 class="mb-0">پروفایل</h4>
        @if (!isLoading)
        {
            <div class="hstack gap-2">
                @if (readOnly)
                {
                    <button class="btn btn-primary" @onclick="EnableEdit"><i class="bi bi-pencil"></i> ویرایش</button>
                }
                else
                {
                    <button class="btn btn-success" @onclick="SaveAsync" disabled="@isSaving">
                        @(isSaving ? "در حال ذخیره..." : "ذخیره تغییرات")
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="CancelEdit" disabled="@isSaving">انصراف</button>
                }
            </div>
        }
    </div>

    <div class="card">
        <div class="card-header">ویرایش شخص</div>
        <div class="card-body">

            @if (isLoading)
            {
                <div class="alert alert-info">در حال بارگذاری...</div>
            }
            else
            {
                @if (!string.IsNullOrEmpty(error))
                {
                    <div class="alert alert-danger">@error</div>
                }
                @if (!string.IsNullOrEmpty(success))
                {
                    <div class="alert alert-success">@success</div>
                }

                <EditForm Model="@model" OnValidSubmit="@SaveAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">ایمیل</label>
                            <InputText class="form-control" @bind-Value="model.Email" disabled="@readOnly" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">کد ملی</label>
                            <InputText class="form-control" @bind-Value="model.NationalCode" disabled="@readOnly" />
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">نام</label>
                            <InputText class="form-control" @bind-Value="model.FirstName" disabled="@readOnly" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">نام خانوادگی</label>
                            <InputText class="form-control" @bind-Value="model.LastName" disabled="@readOnly" />
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">تاریخ تولد</label>
                            <InputDate class="form-control" @bind-Value="model.DateOfBirth" disabled="@readOnly" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">تلفن</label>
                            <InputText class="form-control" @bind-Value="model.PhoneNumber" disabled="true" />
                            <div class="form-text">شماره موبایل از حساب کاربری خوانده می‌شود.</div>
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">جنسیت</label>
                            <InputSelect class="form-select" @bind-Value="model.Gender" disabled="@readOnly">
                                <option value="">— انتخاب کنید —</option>
                                <option>Male</option>
                                <option>Female</option>
                                <option>Other</option>
                            </InputSelect>
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">استان</label>
                            <InputSelect class="form-select"
                                         @bind-Value="model.ProvinceId"
                                         @bind-Value:after="() => ProvinceChanged(model.ProvinceId)"
                                         disabled="@readOnly">
                                <option value="0">— انتخاب کنید —</option>
                                @foreach (var p in provinces)
                                {
                                    <option value="@p.Id">@p.Name</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">شهر</label>
                            <InputSelect class="form-select"
                                         @key="model.ProvinceId"
                                         @bind-Value="model.CityId"
                                         disabled="@readOnly">
                                <option value="0">— انتخاب کنید —</option>
                                @foreach (var c in cities)
                                {
                                    <option value="@c.Id">@c.Name</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">آدرس</label>
                            <InputTextArea class="form-control" @bind-Value="model.Address" disabled="@readOnly" rows="3" />
                        </div>

                        <div class="col-md-6">
                            <div class="mb-2">تصویر فعلی</div>
                            @if (!string.IsNullOrWhiteSpace(model.ProfileImagePath))
                            {
                                <img src="@model.ProfileImagePath" style="width:120px;height:120px;object-fit:cover;border-radius:12px" />
                            }
                            else
                            {
                                <div class="text-muted">— بدون تصویر —</div>
                            }

                            <div class="mt-3">
                                <label class="form-label">انتخاب تصویر جدید (اختیاری)</label>
                                <InputFile OnChange="@OnFileSelected" disabled="@readOnly" />
                                @if (!string.IsNullOrEmpty(previewFileName))
                                {
                                    <div class="form-text">فایل انتخاب‌شده: @previewFileName</div>
                                }
                            </div>
                        </div>
                    </div>

                    @if (!readOnly)
                    {
                        <div class="mt-3 d-flex gap-2">
                            <button class="btn btn-success" type="submit" disabled="@isSaving">ذخیره تغییرات</button>
                            <button class="btn btn-outline-secondary" type="button" @onclick="CancelEdit" disabled="@isSaving">انصراف</button>
                        </div>
                    }
                </EditForm>
            }
        </div>
    </div>

    @* --- کارت امنیت حساب: مستقل از حالت readOnly نمایش داده می‌شود --- *@
    @if (!isLoading)
    {
        <div class="card">
            <div class="card-header">امنیت حساب</div>
            <div class="card-body">
                @if (!hasPassword)
                {
                    <div class="alert alert-warning small">
                        چون اولین‌بار با پیامک وارد شدی، یک رمز عبور تعیین کن تا بدون موبایل هم بتوانی وارد شوی.
                    </div>
                    <EditForm Model="@setVm" OnValidSubmit="@SetPasswordAsync">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-2">
                            <label class="form-label">رمز عبور جدید</label>
                            <InputText class="form-control" @bind-Value="setVm.NewPassword" type="password" />
                            <div class="form-text">
                                حداقل ۶ کاراکتر، شامل حداقل یک حرف و یک رقم.
                            </div>
                        </div>
                        <button class="btn btn-outline-primary" type="submit">تنظیم رمز</button>
                    </EditForm>
                }
                else
                {
                    <EditForm Model="@chVm" OnValidSubmit="@ChangePasswordAsync">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="row g-2">
                            <div class="col-md-4">
                                <label class="form-label">رمز فعلی</label>
                                <InputText class="form-control" @bind-Value="chVm.OldPassword" type="password" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">رمز جدید</label>
                                <InputText class="form-control" @bind-Value="chVm.NewPassword" type="password" />
                                <div class="form-text">
                                    حداقل ۶ کاراکتر، شامل حداقل یک حرف و یک رقم.
                                </div>
                            </div>
                            <div class="col-md-4 d-flex align-items-end">
                                <button class="btn btn-outline-primary" type="submit">تغییر رمز</button>
                            </div>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    }
</div>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthStateTask { get; set; } = default!;

    // حالت‌ها
    bool isLoading = true;
    bool isSaving = false;
    bool readOnly = true;     // صفحه ابتدا فقط‌خواندنی
    string? error;
    string? success;

    // داده‌ها
    Guid? personId;           // اگر کاربر رکورد دارد
    PersonWriteDto model = new();
    List<ProvinceDto> provinces = new();
    List<CityDto> cities = new();

    // امنیت حساب (پسورد)
    bool hasPassword = false;

    // فایل
    string? previewFileName;

    // ViewModels برای امنیت حساب + اعتبارسنجی سمت‌کلاینت
    class SetVm
    {
        [Required(ErrorMessage = "رمز عبور را وارد کنید")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "حداقل ۶ کاراکتر")]
        [RegularExpression(@"^(?=.*[A-Za-z])(?=.*\d).+$", ErrorMessage = "رمز باید حداقل یک حرف و یک رقم داشته باشد")]
        public string NewPassword { get; set; } = "";
    }
    class ChangeVm
    {
        [Required(ErrorMessage = "رمز فعلی را وارد کنید")]
        public string OldPassword { get; set; } = "";

        [Required(ErrorMessage = "رمز جدید را وارد کنید")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "حداقل ۶ کاراکتر")]
        [RegularExpression(@"^(?=.*[A-Za-z])(?=.*\d).+$", ErrorMessage = "رمز باید حداقل یک حرف و یک رقم داشته باشد")]
        public string NewPassword { get; set; } = "";
    }

    SetVm setVm = new();
    ChangeVm chVm = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            var auth = await AuthStateTask;
            var principal = auth.User;
            if (principal?.Identity is null || !principal.Identity.IsAuthenticated)
            {
                Nav.NavigateTo("/phonelogin");
                return;
            }

            var user = await UserManager.GetUserAsync(principal);
            if (user is null) { Nav.NavigateTo("/phonelogin"); return; }

            // استان/شهر
            provinces = (await ProvinceService.GetAllAsync()).ToList();

            // تلاش برای یافتن پروفایل موجود
            var person = await PersonService.GetByUserIdAsync(user.Id);

            if (person is not null)
            {
                personId = person.Id;
                model = new PersonWriteDto
                {
                    FirstName = person.FirstName,
                    LastName = person.LastName,
                    Email = person.Email,
                    PhoneNumber = user.PhoneNumber ?? person.PhoneNumber,
                    DateOfBirth = person.DateOfBirth,
                    Gender = person.Gender,
                    ProvinceId = person.ProvinceId,
                    CityId = person.CityId,
                    Address = person.Address,
                    ProfileImagePath = person.ProfileImagePath,
                    NationalCode = person.NationalCode,
                    UserId = user.Id
                };

                if (model.ProvinceId > 0)
                    cities = (await CityService.GetByProvinceIdAsync(model.ProvinceId)).ToList();
            }
            else
            {
                // اولین ورود: فرم با شماره موبایل فقط‌خواندنی
                model = new PersonWriteDto
                {
                    PhoneNumber = user.PhoneNumber ?? "",
                    Gender = "",
                    ProvinceId = 0,
                    CityId = 0,
                    UserId = user.Id
                };
                readOnly = true;
            }

            // بررسی داشتن پسورد (در scope جدا تا تداخل DbContext رخ ندهد)
            using var scope = ScopeFactory.CreateScope();
            var um = scope.ServiceProvider.GetRequiredService<UserManager<IdentityUser>>();
            hasPassword = await um.HasPasswordAsync(user);
        }
        catch (Exception ex)
        {
            error = $"خطا در بارگذاری: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    void EnableEdit()
    {
        readOnly = false;
        success = error = null;
        StateHasChanged();
    }

    async Task ProvinceChanged(int newProvinceId)
    {
        cities = newProvinceId > 0
            ? (await CityService.GetByProvinceIdAsync(newProvinceId)).ToList()
            : new();
        model.CityId = 0;      // ریست شهر
        StateHasChanged();
    }

    async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file is null) return;

        const long max = 5 * 1024 * 1024; // 5MB
        using var ms = new MemoryStream();
        await file.OpenReadStream(max).CopyToAsync(ms);

        var url = await FileStorage.SaveProfileAsync(ms.ToArray(), file.Name);
        model.ProfileImagePath = url;
        previewFileName = file.Name;
    }

    void CancelEdit()
    {
        Nav.NavigateTo("/profile", forceLoad: true);
    }

    async Task SaveAsync()
    {
        if (readOnly) return;

        error = success = null;
        isSaving = true;

        try
        {
            var auth = await AuthStateTask;
            var principal = auth.User;

            if (principal?.Identity is null || !principal.Identity.IsAuthenticated)
            {
                Nav.NavigateTo("/phonelogin");
                return;
            }

            var user = await UserManager.GetUserAsync(principal);
            if (user is null) { Nav.NavigateTo("/phonelogin"); return; }

            model.UserId = user.Id;

            var existing = await PersonService.GetByUserIdAsync(user.Id);

            if (existing is null)
            {
                await PersonService.CreateAsync(model);
                existing = await PersonService.GetByUserIdAsync(user.Id);
                success = "پروفایل ایجاد شد.";
            }
            else
            {
                await PersonService.UpdateAsync(existing.Id, model);
                success = "تغییرات با موفقیت ذخیره شد.";
            }

            readOnly = true;
        }
        catch (Exception ex)
        {
            error = $"خطا در ذخیره‌سازی: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    // ---- امنیت حساب: تنظیم/تغییر رمز عبور ----
    async Task SetPasswordAsync()
    {
        if (!ValidateLocalPassword(setVm.NewPassword)) return;

        try
        {
            var res = await JS.InvokeAsync<BrowserPostResult>("auth.postJson", "/api/auth/password/set",
                new { newPassword = setVm.NewPassword });

            if (res.ok && res.data?.ok == true)
            {
                success = "رمز عبور تنظیم شد.";
                error = null;
                hasPassword = true;
                setVm = new();
            }
            else
            {
                error = res.data?.message ?? "خطا در تنظیم رمز.";
                success = null;
            }
        }
        catch
        {
            error = "خطای غیرمنتظره در تنظیم رمز.";
        }
    }

    async Task ChangePasswordAsync()
    {
        if (!ValidateLocalPassword(chVm.NewPassword)) return;

        try
        {
            var res = await JS.InvokeAsync<BrowserPostResult>("auth.postJson", "/api/auth/password/change",
                new { oldPassword = chVm.OldPassword, newPassword = chVm.NewPassword });

            if (res.ok && res.data?.ok == true)
            {
                success = "رمز عبور تغییر کرد.";
                error = null;
                chVm = new();
            }
            else
            {
                error = res.data?.message ?? "خطا در تغییر رمز.";
                success = null;
            }
        }
        catch
        {
            error = "خطای غیرمنتظره در تغییر رمز.";
        }
    }

    // ولیدیشن سریع سمت‌کلاینت (قبل از ارسال به سرور)
    bool ValidateLocalPassword(string pwd)
    {
        error = null; success = null;
        if (string.IsNullOrWhiteSpace(pwd))
        {
            error = "رمز عبور را وارد کنید.";
            return false;
        }
        if (pwd.Length < 6)
        {
            error = "حداقل طول رمز ۶ کاراکتر است.";
            return false;
        }
        if (!(pwd.Any(char.IsLetter) && pwd.Any(char.IsDigit)))
        {
            error = "رمز باید حداقل یک حرف و یک رقم داشته باشد.";
            return false;
        }
        return true;
    }

    // مدل پاسخ fetch
    public class BrowserPostResult { public bool ok { get; set; } public ApiResult? data { get; set; } }
    public class ApiResult { public bool ok { get; set; } public string? message { get; set; } }
}
