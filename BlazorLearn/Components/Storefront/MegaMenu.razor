@using BlazorLearn.Data.DTOs
@inject ICatalogReadService Catalog

@rendermode InteractiveServer

<div class="bs-mega"
     @onmouseenter="() => IsOpen = true"
     @onmouseleave="() => IsOpen = false">
    <button class="btn btn-light bs-mega__toggler" @onclick="Toggle">
        <i class="bi bi-list"></i> دسته‌بندی‌ها
    </button>

    @if (IsOpen)
    {
        <div class="bs-mega__panel shadow-lg">
            <!-- ریشه‌ها -->
            <div class="bs-mega__col bs-mega__roots">
                @foreach (var r in roots)
                {
                    var active = (activeRoot?.Id == r.Id);
                    <button class="bs-mega__item @(active ? "is-active" : "")"
                            @onmouseenter="() => SetRoot(r)">
                        @if (!string.IsNullOrWhiteSpace(r.IconUrl))
                        {
                            <img class="bs-mega__icon" src="@r.IconUrl" alt="" />
                        }
                        else
                        {

                            <i class="bi bi-grid-3x3-gap"></i>
                        }
                        <span class="text-truncate">@r.Name</span>
                        <i class="bi bi-chevron-left ms-auto"></i>
                    </button>
                }
            </div>

            <!-- سطح ۲ -->
            <div class="bs-mega__col bs-mega__level2">
                @foreach (var c in level2)
                {
                    var active = (activeL2?.Id == c.Id);
                    <button class="bs-mega__item @(active ? "is-active" : "")"
                            @onmouseenter="() => SetL2(c)">
                        @if (!string.IsNullOrWhiteSpace(c.IconUrl))
                        {
                            <img class="bs-mega__icon" src="@c.IconUrl" alt="" />
                        }
                        else
                        {

                            <i class="bi bi-square"></i>
                        }
                        <span class="text-truncate">@c.Name</span>
                        <i class="bi bi-chevron-left ms-auto"></i>
                    </button>
                }
            </div>

            <!-- سطح ۳ -->
            <div class="bs-mega__col bs-mega__level3">
                <div class="d-flex align-items-center justify-content-between px-3 py-2">
                    <a class="small text-primary"
                       href="/category/@(activeL2?.Slug ?? activeRoot?.Slug)">
                        مشاهده دسته «@((activeL2?.Name ?? activeRoot?.Name) ?? "…")»
                        <i class="bi bi-arrow-left-short"></i>
                    </a>
                </div>

                <div class="bs-mega__grid">
                    @foreach (var s3 in level3)
                    {
                        <a class="bs-mega__card" href="/category/@s3.Slug" title="@s3.Name">
                            <div class="bs-mega__thumb">
                                @if (!string.IsNullOrWhiteSpace(s3.ImageUrl))
                                {
                                    <img src="@s3.ImageUrl" alt="@s3.Name" />
                                }
                                else
                                {

                                    <div class="bs-mega__thumb--ph"></div>
                                }
                            </div>
                            <div class="bs-mega__card-title text-truncate">@s3.Name</div>
                        </a>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool IsOpen;
    private List<CategoryDto> all = new();
    private List<CategoryDto> roots = new();
    private List<CategoryDto> level2 = new();
    private List<CategoryDto> level3 = new();

    private CategoryDto? activeRoot;
    private CategoryDto? activeL2;

    // Lookup: ParentId -> children
    private Dictionary<Guid, List<CategoryDto>> byParent = new();

    protected override async Task OnInitializedAsync()
    {
        all = (await Catalog.GetAllCategoriesAsync()).OrderBy(x => x.SortOrder).ToList();

        // گروه‌بندی فرزندان
        byParent = all
            .Where(c => c.ParentId.HasValue)
            .GroupBy(c => c.ParentId!.Value)
            .ToDictionary(g => g.Key, g => g.OrderBy(x => x.SortOrder).ToList());

        // ریشه‌ها
        roots = all.Where(c => c.ParentId == null).OrderBy(c => c.SortOrder).ToList();

        if (roots.Count > 0)
        {
            SetRoot(roots[0], fireStateHasChanged: false);
            if (level2.Count > 0) SetL2(level2[0], fireStateHasChanged: false);
        }
    }

    private void Toggle() => IsOpen = !IsOpen;

    private void SetRoot(CategoryDto r, bool fireStateHasChanged = true)
    {
        activeRoot = r;
        byParent.TryGetValue(r.Id, out level2);
        level2 ??= new();
        if (fireStateHasChanged) StateHasChanged();
    }

    private void SetL2(CategoryDto c, bool fireStateHasChanged = true)
    {
        activeL2 = c;
        byParent.TryGetValue(c.Id, out level3);
        level3 ??= new();
        if (fireStateHasChanged) StateHasChanged();
    }
}
