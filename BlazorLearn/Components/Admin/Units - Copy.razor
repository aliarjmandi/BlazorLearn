@page "/admin/units"
@using BlazorLearn.Data.DTOs
@using BlazorLearn.Components.Shared
@inject BlazorLearn.Services.Implementations.UnitService UnitService
@inject IJSRuntime JS
@rendermode InteractiveServer




<div class="vstack gap-3">

    <!-- کارت فرم -->
    <div class="card prod-card">
        <div class="card-header">
            معرفی واحد کالا
        </div>
        <div class="card-body">
            <div class="row g-3">
                <!-- فیلدها -->


            </div>
        </div>
    </div>

    <!-- کارت فیلتر/جستجو (اختیاری) -->
    <div class="card">
        <div class="card-header">فیلترها</div>
        <div class="card-body">
            <!-- کنترل‌های فیلتر -->
        </div>
    </div>

    <!-- کارت جدول -->
    <div class="card prod-card">
        <div class="card-header">لیست</div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-sm table-striped table-hover align-middle">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>نام</th>
                            <th class="text-end">عملیات</th>
                        </tr>
                    </thead>
                    <tbody>
                        @* ردیف‌ها *@
                    </tbody>
                </table>
            </div>
        </div>
    </div>

</div>


<EditForm EditContext="_editContext" OnValidSubmit="SaveAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row g-3 align-items-end mb-3">
        <div class="col-md-3">
            <label class="form-label">نام واحد</label>
            <InputText class="form-control" @bind-Value="model.Name" />
            <ValidationMessage For="@(() => model.Name)" />
        </div>
        <div class="col-md-2">
            <label class="form-label">نماد</label>
            <InputText class="form-control" @bind-Value="model.Symbol" />
            <ValidationMessage For="@(() => model.Symbol)" />
        </div>
        <div class="col-md-2">
            <label class="form-label d-block">فعال</label>
            <InputCheckbox class="form-check-input" @bind-Value="model.IsActive" />
        </div>
        <div class="col-md-5 d-flex gap-2">
            <button type="submit" class="btn btn-primary">@(isEditing ? "به‌روزرسانی" : "ذخیره")</button>
            @if (isEditing)
            {
                <button type="button" class="btn btn-outline-secondary" @onclick="CancelEdit">انصراف</button>
            }
        </div>
    </div>
</EditForm>

@if (isLoading)
{
    <p>در حال بارگذاری...</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-sm table-striped table-hover align-middle">
            <thead class="table-light">
                <tr>
                    <th>نام</th>
                    <th>نماد</th>
                    <th class="text-center">فعال</th>
                    <th>تاریخ ثبت</th>
                    <th style="width:160px"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var u in items)
                {
                    <tr>
                        <td>@u.Name</td>
                        <td>@(u.Symbol ?? "-")</td>
                        <td class="text-center">
                            <div class="form-check form-switch d-inline-block">
                                <input type="checkbox" class="form-check-input" checked="@u.IsActive"
                                       @onchange="(e) => ToggleActive(u, e.Value as bool?)" />
                            </div>
                        </td>
                        <td>@u.CreatedAt.ToString("yyyy/MM/dd HH:mm")</td>
                        <td class="text-end">
                            <button class="btn btn-outline-primary btn-sm" @onclick="() => BeginEdit(u)">ویرایش</button>
                            <button class="btn btn-outline-danger btn-sm" @onclick="() => AskDelete(u)">حذف</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="d-flex justify-content-between align-items-center mt-2">
        <div class="text-muted small">
            نمایش @(items.Count) ردیف از @totalCount (صفحه @pageNumber از @totalPages)
        </div>

        <nav>
            <ul class="pagination pagination-sm mb-0">
                <li class="page-item @(pageNumber == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => LoadPageAsync(1)">اول</button>
                </li>
                <li class="page-item @(pageNumber == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => LoadPageAsync(pageNumber - 1)">قبلی</button>
                </li>

                <li class="page-item disabled">
                    <span class="page-link">@pageNumber / @totalPages</span>
                </li>

                <li class="page-item @(pageNumber >= totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => LoadPageAsync(pageNumber + 1)">بعدی</button>
                </li>
                <li class="page-item @(pageNumber >= totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => LoadPageAsync(totalPages)">آخر</button>
                </li>
            </ul>
        </nav>
    </div>
}

<ConfirmModal ModalId="confirmDeleteUnit"
              Title="تأیید حذف"
              ConfirmText="حذف"
              CancelText="انصراف"
              OnConfirm="ConfirmDeleteAsync">
    <Message>
        @if (toDelete is not null)
        {
            <p>حذف واحد «<strong>@toDelete.Name</strong>»؟</p>
        }
    </Message>
</ConfirmModal>

@code {
    private bool isLoading = true;
    private bool isEditing = false;

    // صفحه‌بندی
    private int pageNumber = 1;
    private int pageSize = 10;     // مثل Persons می‌تونی عوضش کنی
    private int totalCount = 0;
    private int totalPages => (int)Math.Ceiling(totalCount / (double)pageSize);

    private List<UnitDto> items = new();

    private UnitWriteDto model = new()
    {
        Name = "",
        Symbol = null,
        IsActive = true,
        CreatedAt = DateTime.Now
    };

    private EditContext _editContext = default!;

    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(model);
        await LoadPageAsync(1);
    }
    private async Task LoadPageAsync(int page)
    {
        isLoading = true;
        pageNumber = Math.Max(1, page);
        var result = await UnitService.GetPagedAsync(pageNumber, pageSize);
        items = result.Items.ToList();
        totalCount = result.TotalCount;
        isLoading = false;
        StateHasChanged();
    }

    private async Task SaveAsync()
    {
        // اگر دستی خواستی قبل از submit اعتبارسنجی کنی:
        // if (!_editContext.Validate()) return;

        if (!isEditing)
        {
            model.CreatedAt = DateTime.Now;
            await UnitService.CreateAsync(model);
        }
        else
        {
            if (model.Id is null) return;
            await UnitService.UpdateAsync(model.Id.Value, model);
        }

        await ReloadAsync();
        ResetForm();
    }

    private void BeginEdit(UnitDto u)
    {
        isEditing = true;
        model = new UnitWriteDto
        {
            Id = u.Id,
            Name = u.Name,
            Symbol = u.Symbol,
            IsActive = u.IsActive,
            CreatedAt = u.CreatedAt
        };
        _editContext = new EditContext(model); // 👈 مهم
    }

    private void CancelEdit() => ResetForm();

    private void ResetForm()
    {
        isEditing = false;
        model = new UnitWriteDto
        {
            Name = "",
            Symbol = null,
            IsActive = true,
            CreatedAt = DateTime.Now
        };
        _editContext = new EditContext(model); // 👈 هر بار مدل عوض شد، EditContext جدید
    }

    private async Task ToggleActive(UnitDto u, bool? val)
    {
        if (val is null) return;
        var dto = new UnitWriteDto
        {
            Id = u.Id,
            Name = u.Name,
            Symbol = u.Symbol,
            IsActive = val.Value,
            CreatedAt = u.CreatedAt
        };
        await UnitService.UpdateAsync(u.Id, dto);
        await ReloadAsync();
    }

    // حذف با مودال (همان قبلی)
    private UnitDto? toDelete;

    private async Task AskDelete(UnitDto u)
    {
        toDelete = u;
        await JS.InvokeVoidAsync("modalHelper.show", "confirmDeleteUnit");
    }

    private async Task ConfirmDeleteAsync()
    {
        if (toDelete is null) return;
        await UnitService.DeleteAsync(toDelete.Id);
        toDelete = null;
        await JS.InvokeVoidAsync("modalHelper.hide", "confirmDeleteUnit");
        await ReloadAsync();
    }

    private async Task ReloadAsync() => await LoadPageAsync(pageNumber);

}

