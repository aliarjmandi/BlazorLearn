@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Identity

@inject UserManager<IdentityUser> UserManager
@inject IUserStore<IdentityUser> UserStore
@inject SignInManager<IdentityUser> SignInManager
@inject IEmailSender<IdentityUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>ایجاد حساب کاربری</PageTitle>
@* 
<h1>Register</h1>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div>
 *@

<div class="vstack gap-3">

    <!-- کارت: ثبت‌نام -->
    <div class="card shadow-sm">
        <div class="card-header">
            ثبت‌نام کاربر جدید
        </div>
        <div class="card-body">
            <StatusMessage Message="@Message" />

            <EditForm Model="Input"
                      asp-route-returnUrl="@ReturnUrl"
                      method="post"
                      OnValidSubmit="RegisterUser"
                      FormName="register">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger mb-3" role="alert" />

                <div class="row g-3">
                    <!-- ایمیل -->
                    <div class="col-12">
                        <label class="form-label">ایمیل</label>
                        <InputText class="form-control"
                                   @bind-Value="Input.Email"
                                   autocomplete="username"
                                   placeholder="example@mail.com" />
                        <ValidationMessage For="@(() => Input.Email)" class="text-danger" />
                    </div>

                    <!-- رمز عبور -->
                    <div class="col-md-6">
                        <label class="form-label">رمز عبور</label>
                        <InputText class="form-control"
                                   type="password"
                                   @bind-Value="Input.Password"
                                   autocomplete="new-password"
                                   placeholder="********" />
                        <div class="form-text">حداقل الزامات تعیین‌شده در اعتبارسنجی رعایت شود.</div>
                        <ValidationMessage For="@(() => Input.Password)" class="text-danger" />
                    </div>

                    <!-- تکرار رمز عبور -->
                    <div class="col-md-6">
                        <label class="form-label">تکرار رمز عبور</label>
                        <InputText class="form-control"
                                   type="password"
                                   @bind-Value="Input.ConfirmPassword"
                                   autocomplete="new-password"
                                   placeholder="********" />
                        <ValidationMessage For="@(() => Input.ConfirmPassword)" class="text-danger" />
                    </div>

                    <!-- دکمه‌ها -->
                    <div class="col-12 d-flex justify-content-end gap-2 mt-1">
                        <button type="submit" class="btn btn-primary">
                            ثبت‌نام
                        </button>
                        <a href="/" class="btn btn-outline-secondary">انصراف</a>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>

    <!-- کارت: ثبت‌نام با سرویس‌های دیگر (اختیاری) -->
    <div class="card">
        <div class="card-header">ثبت‌نام با سرویس‌های دیگر</div>
        <div class="card-body">
            <ExternalLoginPicker />
        </div>
    </div>

</div>


@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private IdentityUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<IdentityUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(IdentityUser)}'. " +
                $"Ensure that '{nameof(IdentityUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<IdentityUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<IdentityUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
