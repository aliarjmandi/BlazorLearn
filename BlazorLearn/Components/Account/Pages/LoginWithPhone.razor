@page "/phonelogin"
@inject HttpClient Http
@inject NavigationManager Nav
@rendermode InteractiveServer

<div class="vstack gap-3">

    <!-- کارت ورود/OTP -->
    <div class="card" style="max-width:520px">
        <div class="card-header">
            ورود با شماره موبایل
        </div>
        <div class="card-body">

            @if (!string.IsNullOrEmpty(Error))
            {
                <div class="alert alert-danger py-2">@Error</div>
            }
            @if (!string.IsNullOrEmpty(Info))
            {
                <div class="alert alert-info py-2">@Info</div>
            }
            @if (!string.IsNullOrEmpty(Success))
            {
                <div class="alert alert-success py-2">@Success</div>
            }

            @if (Step == 1)
            {
                <EditForm Model="@this" OnValidSubmit="@RequestOtpAsync">
                    <DataAnnotationsValidator />
                    <div class="row g-3">
                        <div class="col-12">
                            <label class="form-label">شماره موبایل</label>
                            <InputText class="form-control ltr text-start" @bind-Value="Phone" />
                            <div class="form-text">نمونه: 09121234567</div>
                        </div>
                        <div class="col-12 d-flex gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@Busy">
                                @(Busy ? "در حال ارسال..." : "دریافت کد تأیید")
                            </button>
                        </div>
                    </div>
                </EditForm>
            }
            else if (Step == 2)
            {
                <div class="mb-2 text-muted small">
                    کد تأیید برای شماره <strong>@MaskedPhone</strong> ارسال شد.
                </div>

                <EditForm Model="@this" OnValidSubmit="@VerifyAsync">
                    <DataAnnotationsValidator />
                    <div class="row g-3">
                        <div class="col-12">
                            <label class="form-label">کد تأیید</label>
                            <InputText class="form-control text-center ltr" maxlength="6" @bind-Value="Code" />
                        </div>

                        <div class="col-12 d-flex align-items-center gap-2">
                            <button type="submit" class="btn btn-success" disabled="@Busy">
                                @(Busy ? "در حال بررسی..." : "تأیید و ورود")
                            </button>

                            <button type="button"
                                    class="btn btn-outline-secondary"
                                    disabled="@((ResendIn > 0) || Busy)"
                                    @onclick="ResendAsync">
                                @((ResendIn > 0) ? $"ارسال مجدد ({ResendIn})" : "ارسال مجدد")
                            </button>
                        </div>

                        <div class="col-12">
                            <button type="button" class="btn btn-link" @onclick="BackToPhone">
                                تغییر شماره
                            </button>
                        </div>
                    </div>
                </EditForm>
            }
        </div>
    </div>

</div>

@code {
    // ==== State ====
    private int Step = 1;              // 1: phone | 2: code
    private bool Busy;
    public string Phone { get; set; } = "";
    public string Code { get; set; } = "";
    private string Error = "";
    private string Info = "";
    private string Success = "";
    private int ResendIn = 0;          // ثانیه تا فعال شدن دکمه‌ی ارسال مجدد
    private System.Timers.Timer? _resendTimer;

    private string MaskedPhone =>
        string.IsNullOrWhiteSpace(Phone) || Phone.Length < 4
            ? Phone
            : Phone[..Math.Max(0, Phone.Length - 4)].Replace(char.MinValue, '*') + "****";

    // ==== Helpers ====
    private void ResetAlerts()
    {
        Error = ""; Info = ""; Success = "";
    }

    private bool LooksLikePhone(string p)
    {
        if (string.IsNullOrWhiteSpace(p)) return false;
        var s = p.Trim();
        // ساده: 11 رقم با شروع 09
        return s.Length == 11 && s.StartsWith("09") && long.TryParse(s, out _);
    }

    private void StartResendCooldown(int seconds = 30)
    {
        ResendIn = seconds;
        _resendTimer?.Dispose();
        _resendTimer = new System.Timers.Timer(1000);
        _resendTimer.Elapsed += (_, __) =>
        {
            if (ResendIn > 0)
            {
                ResendIn--;
                InvokeAsync(StateHasChanged);
            }
            else
            {
                _resendTimer?.Stop();
                _resendTimer?.Dispose();
                _resendTimer = null;
            }
        };
        _resendTimer.Start();
    }

    // ==== Actions ====
    private async Task RequestOtpAsync()
    {
        ResetAlerts();

        if (!LooksLikePhone(Phone))
        {
            Error = "شماره موبایل معتبر نیست.";
            return;
        }

        try
        {
            Busy = true;
            var payload = new { phone = Phone };
            var res = await Http.PostAsJsonAsync("/api/auth/otp/request", payload);

            if (res.IsSuccessStatusCode)
            {
                Info = "کد تأیید برای شما ارسال شد.";
                Step = 2;
                Code = "";
                StartResendCooldown(30);
            }
            else
            {
                var txt = await res.Content.ReadAsStringAsync();
                Error = string.IsNullOrWhiteSpace(txt) ? "خطا در ارسال کد." : txt;
            }
        }
        catch
        {
            Error = "خطا در ارتباط با سرور.";
        }
        finally
        {
            Busy = false;
        }
    }

    private async Task ResendAsync()
    {
        ResetAlerts();

        if (!LooksLikePhone(Phone))
        {
            Error = "شماره موبایل معتبر نیست.";
            return;
        }

        try
        {
            Busy = true;
            var payload = new { phone = Phone };
            var res = await Http.PostAsJsonAsync("/api/auth/otp/resend", payload);

            if (res.IsSuccessStatusCode)
            {
                Info = "کد جدید ارسال شد.";
                StartResendCooldown(30);
            }
            else
            {
                var txt = await res.Content.ReadAsStringAsync();
                Error = string.IsNullOrWhiteSpace(txt) ? "امکان ارسال مجدد فعلاً نیست." : txt;
            }
        }
        catch
        {
            Error = "خطا در ارتباط با سرور.";
        }
        finally
        {
            Busy = false;
        }
    }

    private async Task VerifyAsync()
    {
        ResetAlerts();

        if (string.IsNullOrWhiteSpace(Code))
        {
            Error = "کد تأیید را وارد کنید.";
            return;
        }

        try
        {
            Busy = true;
            var payload = new { phone = Phone, code = Code };
            var res = await Http.PostAsJsonAsync("/api/auth/otp/verify", payload);

            if (res.IsSuccessStatusCode)
            {
                Success = "ورود با موفقیت انجام شد.";
                // بعد از کمی مکث برو پروفایل
                await Task.Delay(600);
                Nav.NavigateTo("/profile", forceLoad: false);
            }
            else
            {
                var txt = await res.Content.ReadAsStringAsync();
                Error = string.IsNullOrWhiteSpace(txt) ? "کد واردشده صحیح نیست." : txt;
            }
        }
        catch
        {
            Error = "خطا در ارتباط با سرور.";
        }
        finally
        {
            Busy = false;
        }
    }

    private void BackToPhone()
    {
        ResetAlerts();
        Step = 1;
        Code = "";
        _resendTimer?.Dispose();
        _resendTimer = null;
        ResendIn = 0;
    }

    protected override void OnParametersSet()
    {
        // اگر لاگین بودی، می‌تونی مستقیم منتقل کنی (دلخواه)
        base.OnParametersSet();
    }

    public void Dispose()
    {
        _resendTimer?.Dispose();
    }
}
