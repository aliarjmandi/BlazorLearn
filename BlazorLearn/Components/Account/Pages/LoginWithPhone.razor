@page "/phonelogin"
@using System.ComponentModel.DataAnnotations
@using BlazorLearn.Components.Layout
@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JS
@rendermode InteractiveServer
@layout StorefrontLayout

<div class="vstack gap-3">
    <div class="card mx-auto" style="max-width:520px">
        <div class="card-header">
            ورود با شماره موبایل
        </div>
        <div class="card-body">

            @if (Step == 1)
            {
                <EditForm Model="@PhoneModel" OnValidSubmit="@RequestAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label">شماره موبایل</label>
                        <InputText @bind-Value="PhoneModel.Phone" class="form-control" />
                        <div class="form-text">مثال: 0912xxxxxxx یا +98912xxxxxxx</div>
                    </div>

                    @if (!string.IsNullOrEmpty(Message))
                    {
                        <div class="alert alert-info py-2">@Message</div>
                    }

                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-primary" disabled="@Busy">
                            @(Busy ? "در حال ارسال..." : "دریافت کد تأیید")
                        </button>
                    </div>
                </EditForm>
            }
            else if (Step == 2)
            {
                <div class="mb-2 text-muted small">
                    کد تأیید برای شماره <strong>@MaskedPhone</strong> ارسال شد.
                </div>

                <EditForm Model="@VerifyModel" OnValidSubmit="@VerifyAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label">کد تأیید</label>
                        <InputText @bind-Value="VerifyModel.Code" class="form-control" inputmode="numeric" />
                    </div>

                    <div class="form-check mb-3">
                        <InputCheckbox @bind-Value="VerifyModel.RememberMe" class="form-check-input" id="rememberMe" />
                        <label for="rememberMe" class="form-check-label">من را به خاطر بسپار</label>
                    </div>

                    @if (!string.IsNullOrEmpty(Message))
                    {
                        <div class="alert @(IsError ? "alert-danger" : "alert-info") py-2">@Message</div>
                    }

                    <div class="d-flex align-items-center gap-2">
                        <button type="submit" class="btn btn-success" disabled="@Busy">
                            @(Busy ? "در حال بررسی..." : "تأیید و ورود")
                        </button>

                        <button type="button" class="btn btn-link"
                                @onclick="ResendAsync" disabled="@Busy || ResendIn > 0">
                            ارسال مجدد @if (ResendIn > 0) {
                            <span>(@ResendIn)</span>
                        }
                    </button>

                    <button type="button" class="btn btn-link" @onclick="EditPhone" disabled="@Busy">
                        ویرایش شماره
                    </button>
                </div>
            </EditForm>
                        }
        </div>
    </div>
</div>

@code {
    // -------- UI State --------
    int Step = 1;                 // 1: phone, 2: verify
    bool Busy;
    bool IsError;
    string? Message;
    string? E164Phone;
    string? MaskedPhone;
    System.Threading.Timer? _timer;
    int ResendIn;

    // -------- Models --------
    PhoneDto PhoneModel { get; set; } = new();
    VerifyDto VerifyModel { get; set; } = new();

    public class PhoneDto
    {
        [Required(ErrorMessage = "شماره موبایل را وارد کنید")]
        [StringLength(20, MinimumLength = 9, ErrorMessage = "طول شماره معتبر نیست")]
        public string Phone { get; set; } = "";
    }

    public class VerifyDto
    {
        [Required(ErrorMessage = "کد تأیید را وارد کنید")]
        [StringLength(10)]
        public string Code { get; set; } = "";
        public bool RememberMe { get; set; } = true;
    }

    // -------- API Dtos (هم‌راستا با سرور) --------
    public class ApiResult { public bool ok { get; set; } public string? message { get; set; } }
    public class VerifyResult { public bool ok { get; set; } public bool isNewUser { get; set; } public string? redirect { get; set; } public string? message { get; set; } }

    // برای JS interop (پاسخ fetch)
    public class BrowserPostResult
    {
        public bool ok { get; set; }
        public VerifyResult? data { get; set; }
    }

    // -------- Actions --------
    async Task RequestAsync()
    {
        ResetMsg();
        Busy = true;
        try
        {
            var phone = NormalizeToLatinDigits(PhoneModel.Phone?.Trim() ?? "");
            var res = await Http.PostAsJsonAsync("/api/auth/otp/request", new { phone });
            var body = await res.Content.ReadFromJsonAsync<ApiResult>();

            if (res.IsSuccessStatusCode && body?.ok == true)
            {
                E164Phone = phone;                       // همون چیزی که سمت سرور نرمال می‌شود
                MaskedPhone = MaskPhone(phone);
                Message = body.message ?? "کد ارسال شد";
                Step = 2;
                StartResendCooldown(30);
            }
            else
            {
                Error(body?.message ?? "خطا در ارسال کد");
            }
        }
        catch
        {
            Error("خطای غیرمنتظره هنگام ارسال کد");
        }
        finally { Busy = false; }
    }

    async Task VerifyAsync()
    {
        ResetMsg();
        Busy = true;
        try
        {
            var code = NormalizeToLatinDigits(VerifyModel.Code?.Trim() ?? "");
            var payload = new { phone = E164Phone, code, rememberMe = VerifyModel.RememberMe };

            // درخواست از طریق مرورگر تا Set-Cookie در کلاینت ست شود
            var res = await JS.InvokeAsync<BrowserPostResult>("auth.postJson", "/api/auth/otp/verify", payload);

            if (res.ok && res.data?.ok == true)
            {
                // پس از ست شدن کوکی، با forceLoad مدار Blazor را رفرش کن
                Nav.NavigateTo(res.data.redirect ?? "/", forceLoad: true);
                return;
            }
            else
            {
                Error(res.data?.message ?? "کد نادرست یا منقضی است");
            }
        }
        catch
        {
            Error("خطای غیرمنتظره هنگام تأیید کد");
        }
        finally { Busy = false; }
    }

    async Task ResendAsync()
    {
        if (ResendIn > 0) return;
        ResetMsg();
        Busy = true;
        try
        {
            var res = await Http.PostAsJsonAsync("/api/auth/otp/resend", new { phone = E164Phone });
            var body = await res.Content.ReadFromJsonAsync<ApiResult>();
            if (res.IsSuccessStatusCode && body?.ok == true)
            {
                Message = body.message ?? "کد مجدداً ارسال شد";
                StartResendCooldown(30);
            }
            else
            {
                Error(body?.message ?? "ارسال مجدد ناموفق بود");
            }
        }
        catch
        {
            Error("خطای غیرمنتظره هنگام ارسال مجدد");
        }
        finally { Busy = false; }
    }

    void EditPhone()
    {
        Step = 1;
        VerifyModel.Code = "";
        ResetMsg();
        StopTimer();
        ResendIn = 0;
    }

    // -------- Helpers --------
    void StartResendCooldown(int seconds)
    {
        StopTimer();
        ResendIn = seconds;
        _timer = new System.Threading.Timer(_ =>
        {
            if (ResendIn > 0)
            {
                ResendIn--;
                InvokeAsync(StateHasChanged);
            }
        }, null, 1000, 1000);
    }

    void StopTimer()
    {
        _timer?.Dispose();
        _timer = null;
    }

    void ResetMsg()
    {
        IsError = false;
        Message = null;
    }

    void Error(string msg)
    {
        IsError = true;
        Message = msg;
    }

    static string NormalizeToLatinDigits(string s)
    {
        var map = new Dictionary<char, char>
        {
            ['۰'] = '0',
            ['۱'] = '1',
            ['۲'] = '2',
            ['۳'] = '3',
            ['۴'] = '4',
            ['۵'] = '5',
            ['۶'] = '6',
            ['۷'] = '7',
            ['۸'] = '8',
            ['۹'] = '9',
            ['٠'] = '0',
            ['١'] = '1',
            ['٢'] = '2',
            ['٣'] = '3',
            ['٤'] = '4',
            ['٥'] = '5',
            ['٦'] = '6',
            ['٧'] = '7',
            ['٨'] = '8',
            ['٩'] = '9',
        };
        var ch = s.ToCharArray();
        for (int i = 0; i < ch.Length; i++)
            if (map.TryGetValue(ch[i], out var l)) ch[i] = l;
        return new string(ch);
    }

    static string MaskPhone(string? p)
    {
        if (string.IsNullOrWhiteSpace(p)) return "";
        var s = p.Trim();
        if (s.StartsWith("+") && s.Length > 6) return s[..4] + "****" + s[^3..];
        if (s.Length > 6) return s[..3] + "****" + s[^3..];
        return s;
    }

    public void Dispose() => StopTimer();
}
